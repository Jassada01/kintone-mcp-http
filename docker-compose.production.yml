services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx-ip-only.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - kintone-mcp-server
    restart: unless-stopped
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  kintone-mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.http
    expose:
      - "3000"
    environment:
      # Kintone configuration from .env file
      KINTONE_BASE_URL: ${KINTONE_BASE_URL}
      KINTONE_USERNAME: ${KINTONE_USERNAME:-}
      KINTONE_PASSWORD: ${KINTONE_PASSWORD:-}
      KINTONE_API_TOKEN: ${KINTONE_API_TOKEN:-}
      
      # Optional configurations
      KINTONE_BASIC_AUTH_USERNAME: ${KINTONE_BASIC_AUTH_USERNAME:-}
      KINTONE_BASIC_AUTH_PASSWORD: ${KINTONE_BASIC_AUTH_PASSWORD:-}
      HTTPS_PROXY: ${HTTPS_PROXY:-}
      
      # Server configuration
      HOST: 0.0.0.0
      PORT: 3000
      CORS_ORIGIN: "*"
      NODE_ENV: production
    restart: unless-stopped
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Security: run as non-root user
    user: "1001:1001"
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

networks:
  mcp_network:
    driver: bridge