events {
    worker_connections 1024;
}

http {
    upstream mcp_backend {
        server kintone-mcp-server:3000;
        # For load balancing, add more servers:
        # server kintone-mcp-server-2:3000;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=5r/s;
    
    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    server {
        listen 80;
        server_name _;  # Accept any hostname/IP address
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        # Health check endpoint
        location /health {
            limit_req zone=health burst=10 nodelay;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Accept, Mcp-Session-Id, Last-Event-ID, Authorization" always;
            
            proxy_pass http://mcp_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Quick response for health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # MCP endpoint - main API
        location /mcp {
            limit_req zone=api burst=20 nodelay;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Accept, Mcp-Session-Id, Last-Event-ID, Authorization" always;
            add_header Access-Control-Expose-Headers "Mcp-Session-Id" always;
            add_header Access-Control-Max-Age 86400 always;
            
            # Proxy to MCP backend
            proxy_pass http://mcp_backend/mcp;
            proxy_http_version 1.1;
            
            # Headers for proper proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # SSE and WebSocket support
            proxy_set_header Connection '';
            proxy_set_header Cache-Control 'no-cache';
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts for long-running connections
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;
        }
        
        # API info endpoint
        location /api/info {
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Accept, Mcp-Session-Id, Last-Event-ID, Authorization" always;
            
            default_type application/json;
            return 200 '{"service":"Kintone MCP Server","version":"1.0.0","transport":"http","endpoints":["/health","/mcp"],"timestamp":"$time_iso8601"}';
        }
        
        # Root endpoint with basic info
        location = / {
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Accept, Mcp-Session-Id, Last-Event-ID, Authorization" always;
            
            default_type application/json;
            return 200 '{"message":"Kintone MCP Server","endpoints":{"health":"/health","mcp":"/mcp","info":"/api/info"},"docs":"https://github.com/Jassada01/kintone-mcp-http"}';
        }
        
        # Block all other requests
        location / {
            return 404;
        }
        
        # Access logging
        access_log /var/log/nginx/mcp_access.log main;
        error_log /var/log/nginx/mcp_error.log warn;
    }
}